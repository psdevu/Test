// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /guides)
	GetGuides(ctx echo.Context) error
	// (POST /guides)
	AddGuides(ctx echo.Context) error
	// (POST /guides/guide/)
	AddGuide(ctx echo.Context) error
	// (GET /listings)
	GetListings(ctx echo.Context) error
	// (POST /listings)
	AddListings(ctx echo.Context) error
	// (POST /listings/listing/)
	AddListing(ctx echo.Context) error
	// (GET /listings/listing/{listingID})
	GetListing(ctx echo.Context, listingID string) error
	// (GET /listings/search)
	SearchListings(ctx echo.Context, params SearchListingsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetGuides converts echo context to params.
func (w *ServerInterfaceWrapper) GetGuides(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGuides(ctx)
	return err
}

// AddGuides converts echo context to params.
func (w *ServerInterfaceWrapper) AddGuides(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddGuides(ctx)
	return err
}

// AddGuide converts echo context to params.
func (w *ServerInterfaceWrapper) AddGuide(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddGuide(ctx)
	return err
}

// GetListings converts echo context to params.
func (w *ServerInterfaceWrapper) GetListings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetListings(ctx)
	return err
}

// AddListings converts echo context to params.
func (w *ServerInterfaceWrapper) AddListings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddListings(ctx)
	return err
}

// AddListing converts echo context to params.
func (w *ServerInterfaceWrapper) AddListing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddListing(ctx)
	return err
}

// GetListing converts echo context to params.
func (w *ServerInterfaceWrapper) GetListing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "listingID" -------------
	var listingID string

	err = runtime.BindStyledParameter("simple", false, "listingID", ctx.Param("listingID"), &listingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter listingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetListing(ctx, listingID)
	return err
}

// SearchListings converts echo context to params.
func (w *ServerInterfaceWrapper) SearchListings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchListingsParams
	// ------------- Optional query parameter "guideName" -------------
	if paramValue := ctx.QueryParam("guideName"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "guideName", ctx.QueryParams(), &params.GuideName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter guideName: %s", err))
	}

	// ------------- Optional query parameter "keywords" -------------
	if paramValue := ctx.QueryParam("keywords"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "keywords", ctx.QueryParams(), &params.Keywords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keywords: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchListings(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/guides", wrapper.GetGuides)
	router.POST("/guides", wrapper.AddGuides)
	router.POST("/guides/guide/", wrapper.AddGuide)
	router.GET("/listings", wrapper.GetListings)
	router.POST("/listings", wrapper.AddListings)
	router.POST("/listings/listing/", wrapper.AddListing)
	router.GET("/listings/listing/:listingID", wrapper.GetListing)
	router.GET("/listings/search", wrapper.SearchListings)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
